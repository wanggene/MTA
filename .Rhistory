n = length(x); mu = mean(x)
if (type == 'sample') {
stdev = sqrt(sum((x-mu)^2)/(n-1))
}
if (type == 'population') {
stdev = sqrt(sum((x-mu)^2)/(n))
}
return(stdev)
}
?SDcalc
SDcalc(a, 'sample')
SDcalc(a)
sum
?sum
install.packages("docstring")
library("docstring", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
SDcalc = function(x, type='population', ... ) {
#' This function is to calcualte the standard deviation
#'
n = length(x); mu = mean(x, ...)
if (type == 'sample') {
stdev = sqrt(sum((x-mu)^2, ...)/(n-1))
}
if (type == 'population') {
stdev = sqrt(sum((x-mu)^2, ...)/(n))
}
return(stdev)
}
?SDcalc
help(SDcalc)
SDcalc = function(x, type='population', ... ) {
#' This function is to calcualte the standard deviation
#'
n = length(x); mu = mean(x, ...)
if (type == 'sample') {
stdev = sqrt(sum((x-mu)^2, ...)/(n-1))
}
if (type == 'population') {
stdev = sqrt(sum((x-mu)^2, ...)/(n))
}
return(stdev)
}
test = c(1:10, NA)
test
SDcalc(test)
SDcalc(test, rm.na=T)
SDcalc(test, na.rm=T)
length()
length
?length
test
SDcalc = function(x, type='population', ... ) {
#' This function is to calcualte the standard deviation
#'
n = length(as.integer(na.omit(x)))
# n = length(x);
mu = mean(x, ...)
if (type == 'sample') {
stdev = sqrt(sum((x-mu)^2, ...)/(n-1))
}
if (type == 'population') {
stdev = sqrt(sum((x-mu)^2, ...)/(n))
}
return(stdev)
}
SDcalc(test)
SDcalc = function(x, type='population', ... ) {
#' This function is to calcualte the standard deviation
#'
# n = length(as.integer(na.omit(x)))
n = length(x);
mu = mean(x, ...)
if (type == 'sample') {
stdev = sqrt(sum((x-mu)^2, ...)/(n-1))
}
if (type == 'population') {
stdev = sqrt(sum((x-mu)^2, ...)/(n))
}
return(stdev)
}
SDcalc(test)
SDcalc = function(x, type='population', ... ) {
#' This function is to calcualte the standard deviation
#'
n = length(as.integer(na.omit(x)))
# n = length(x);
mu = mean(x, ...)
if (type == 'sample') {
stdev = sqrt(sum((x-mu)^2, ...)/(n-1))
}
if (type == 'population') {
stdev = sqrt(sum((x-mu)^2, ...)/(n))
}
return(stdev)
}
a <- c('NPR', 'New York Times', 'MSNBC')
b <- c('Wall Street Journal', 'NPR', 'Fox News')
'%int%' = function(x, y) {
intersect(x, y)
}
a %int% b
Fac1 = function(n) {
if (n == 0) {
return(1) }
return(n * Fac1(n-1))
}
Fac1(10)
iris_split = split(iris, iris$Species)
class(iris_split)
attributes(iris_split)
str(iris_split)
avg_petallen = function(x) {
mean(x$Petal.Length) }
lapply(iris_split, avg_petallen)
lapply(iris_split, avg_petallen)
iris_unsplit <- unsplit(iris_split, iris$Species)
class(iris_unsplit)
iris_unsplit
iris_unsplit[c(1, 51, 101), ]
test = rep(c('virginica', 'versicolor', 'setosa'),50)
head(unsplit(iris_split, test))
i=2; x = c(1, 1)
while (x[i] < 1e6) {
x[i+1] = x[i-1] + x[i]
i= i + 1 }
x = x[c(-1, -i)]
cat('The sum of even # is ', sum(ifelse(x %% 2 == 0, x , 0)))
B = seq(0, 50 ,10)
A * B
B = array(seq(0, 50 ,10))
B
A * B
A * T(B)
B = matrix(seq(0, 50 ,10), 5,1)
A * T(B)
A * B
B
dim(A)
dim(B)
A * B
B* A
A %*% B
A = matrix(c(1:15), 3, 5)
y = c(1:5)
A %*% y
absout
x = c(1:10)
abs(x - median(x))
median(abs(x - median(x)) )
mad = function(x) {
return(median(abs(x - median(x))))
}
mad(x)
paste
names <- "John Andrew Thomas”
paste0(names, sep = '@gmail.com', collapse = ';')
names = 'John Andrew Thomas'
paste0(names, sep = '@gmail.com', collapse = ';')
paste;
.
""
/
exit
""
names = 'John Andrew Thomas'
paste0(strsplit(names, sep=' '), sep = '@gmail.com', collapse = ';')
strsplit(names, split=' ')
paste0(strsplit(names, split=' '), sep = '@gmail.com', collapse = ';')
strsplit(names, split=' ')[[1]]
paste0(strsplit(names, split=' ')[[1]], sep = '@gmail.com', collapse = ';')
paste0(strsplit(names, split=' ')[[1]], sep = '@gmail.com', collapse = '; ')
letter = c ('a' , 'b', 'c', 'd', 'e')
letter[1]
rep(c(1,3,4), c(1,3,4))
rep(c(a,b), c(a,b))
rep(c('a','b'), c('a','b'))
i=2; x = c(1, 1)
while (x[i] < 4*1e6) {  # less than 4 million
x[i+1] = x[i-1] + x[i]
i= i + 1 }
x = x[c(-1, -i)]
cat('The sum of even-terms samll than four million is',
sum(ifelse(x %% 2 == 0, x, 0)))
cat('The sum of even-terms samll than four million is',
sum(ifelse(x %% 2 == 0, x, 0)))
A = matrix(c(1:15), 3, 5)
cat('The sum of even-terms samll than four million is',
sum(ifelse(x %% 2 == 0, x, 0)))
A = matrix(c(1:15), 3, 5)
i=2; x = c(1, 1)
while (x[i] < 4*1e6) {  # less than 4 million
x[i+1] = x[i-1] + x[i]
i= i + 1 }
x = x[c(-1, -i)]
cat('The sum of even-terms samll than four million is',
sum(ifelse(x %% 2 == 0, x, 0)))
A = matrix(c(1:15), 3, 5)
install.packages("docstring")
library("docstring", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
## Not run:
square <- function(x){
#' Square a number
#'
#' Calculates the square of the input
#'
#' @param x the input to be squared
return(x^2)
}
?square
library(devtools)
install_github("dasonk/docstring")
docstr <- function(my.fun) {
# Comments are not retained
# So, we can put extra stuff here we don't want
# our docstr users to see
'This is a docstring that will be printed with extra whitespace and quotes'
orig.code.ish <- deparse(my.fun)
print(orig.code.ish[3])
}
craps = function(n=1) {
i = 1 ; x = c(1:n)
for (i in x ) { j = 1  # loop for whole game set
while (TRUE) {     # loop for each game
t = sum(sample(1:6 , 2))  # roll dice
if (j == 1 &  t %in% c(7,11)) { r = T ; break
} else if (j==1 & t %in% c(2,3,12)) { r = F ; break
} else if (j!=1 & t == 7) { r = F ; break
} else if (j!=1 & t == t) { r = T ; break
} else { t = t ; j = j + 1 }}
x[i] = ifelse(r, 'Win', 'Loss') # each game outcome
}; return(x)
}
docstr(craps)
A = matrix(c(1:15), 3, 5)
A
y = c(1:5)
y
A %*% y
dim(y)
x = letters[1:5]      # choose letters
unlist(lapply(x, function(i) paste0(x,i)))
compare = function(x, y){
ifelse(nchar(x)==nchar(y),'Equal Length','Not Equal Length')}
compare("EPS568","Summer")
compare("EPS568","SummerA")
names = 'John Andrew Thomas'
paste0(strsplit(names, split=' ')[[1]], sep = '@gmail.com', collapse = '; ')
mad = function(x, na.rm=F){
if(na.rm){x = x[!is.na(x)]}
return(median(abs(x - median(x))))}
mad(c(1:13, NA), na.rm=T)
craps = function(n=1) {
i = 1 ; x = c(1:n)
for (i in x ) { j = 1  # loop for whole game set
while (TRUE) {     # loop for each game
t = sum(sample(1:6 , 2))  # roll dice
if (j == 1 &  t %in% c(7,11)) { r = T ; break
} else if (j==1 & t %in% c(2,3,12)) { r = F ; break
} else if (j!=1 & t == 7) { r = F ; break
} else if (j!=1 & t == t) { r = T ; break
} else { t = t ; j = j + 1 }}
x[i] = ifelse(r, 'Win', 'Loss') # each game outcome
}; return(x)
}
craps()              # single game
table(craps(1000))   # set of games
table(craps(1000))   # set of games
table(craps(1000))   # set of games
table(craps(1000))   # set of games
table(craps(1000))   # set of games
A = matrix(c(1:15), 3, 5)
y = c(1:5)
A %*% y
A
y
#a.
t.statistic = (mean(df1$Body.Temp) - 98.6)/(sd(df1$Body.Temp)/sqrt(130)) #Manually calculating
library(dplyr)
library(ggplot2)
library(datasets)
df1 = read.table('Temp.txt', sep=' ', header = T, stringsAsFactors = F)
head(df1)
summary(df1)
# univariate EDA
# Overall Distribution of Body temp
boxplot(df1$Body.Temp)
# Overall Distribution of Heart rate
boxplot(df1$Heart.Rate)
df1 %>% ggplot(aes(x=Gender)) +
geom_bar() +
theme(text = element_text(size=9))
# bivariate EDA
df1 %>% group_by(Gender) %>%
ggplot(aes(x = Gender, y = Body.Temp)) +
geom_boxplot(aes(x=Gender)) +
theme(text = element_text(size=9))
df1 %>% group_by(Gender) %>%
ggplot(aes(x = Gender, y = Heart.Rate)) +
geom_boxplot(aes(x=Gender)) +
theme(text = element_text(size=9))
ggplot(df1, aes(x = Body.Temp, y = Heart.Rate)) +
geom_point() +
theme(text = element_text(size=9))
#a.
t.statistic = (mean(df1$Body.Temp) - 98.6)/(sd(df1$Body.Temp)/sqrt(130)) #Manually calculating
t.statistic                                                #the t-statistic
#comparing to 98.6.
t.test(df1$Body.Temp, mu = 98.6, alternative = "two.sided")  #Same test, using the t.test()
#function.
#a.
Temp_male = df1$Body.Temp[df1$Gender == 'Male' ]
Temp_female = df1$Body.Temp[df1$Gender == 'Female' ]
boxplot(Temp_male, Temp_female, main = "Sample Distribution of Body Temp",
col = c("red", "blue"), names = c("Male", "Female"))
# Manually calculating the t-statistic.
t.statistic = (mean(Temp_male) - mean(Temp_female))/sqrt(var(Temp_male)/65 + var(Temp_female)/65)
t.statistic
t.test(Temp_male, Temp_female, alternative = "two.sided")
#a.
t.statistic = (mean(df1$Body.Temp) - 98.6)/(sd(df1$Body.Temp)/sqrt(130)) #Manually calculating
t.statistic                                                #the t-statistic
#comparing to 98.6.
cat('------------------------')
t.test(df1$Body.Temp, mu = 98.6, alternative = "two.sided")  #Same test, using the t.test()
#function.
Temp_male_sample = sample(df1$Body.Temp[df1$Gender == 'Male' ], 1000, replace = T)
Temp_female_sample = sample(df1$Body.Temp[df1$Gender == 'Female' ], 1000, replace = T)
t.test(Temp_male_sample, Temp_female_sample, alternative = "two.sided")
HairEyeColor
HairEyeColor[ ,c('Brown', 'Blue') ,'Female']
library(graphics)
# Calculate the standard deviations
sd(df2$weight[df2$group=='ctrl'])
df2 = PlantGrowth
g = ggplot(df2, aes(x=group, y = weight))
g + geom_boxplot() +
xlab('Treatment') +
ggtitle('Boxplot of Plant Weights by Different Treatments')+
theme(text = element_text(size=8))
library(graphics)
# Calculate the standard deviations
sd(df2$weight[df2$group=='ctrl'])
sd(df2$weight[df2$group=='trt1'])
sd(df2$weight[df2$group=='trt2'])
cat(' \n ------ ------------------------------ \n')
t.test(df2$weight[df2$group=='trt1'], df2$weight[df2$group=='trt2'], alternative = "two.sided")
cat(' \n ------ Bartletts Test---------------- \n')
bartlett.test(weight~group, df2)
Temp_male_sample = sample(df1$Body.Temp[df1$Gender == 'Male' ], 10000, replace = T)
Temp_female_sample = sample(df1$Body.Temp[df1$Gender == 'Female' ], 10000, replace = T)
t.test(Temp_male_sample, Temp_female_sample, alternative = "two.sided")
Temp_male_sample = sample(df1$Body.Temp[df1$Gender == 'Male' ], 1000, replace = T)
Temp_female_sample = sample(df1$Body.Temp[df1$Gender == 'Female' ], 1000, replace = T)
t.test(Temp_male_sample, Temp_female_sample, alternative = "two.sided")
shiny::runApp('~/GitHub/MTA')
runApp('~/GitHub/MTA')
runApp('~/GitHub/MTA')
runApp('~/GitHub/MTA')
runApp('~/GitHub/MTA')
runApp('~/GitHub/MTA')
runApp('~/GitHub/MTA')
runApp('~/GitHub/MTA')
runApp('~/GitHub/MTA')
View(df)
runApp('~/GitHub/MTA')
df %>% filter(To.Date > '2010-06-10') %>%
filter(fare_type == input$fare_type) %>%
group_by_(input$station) %>%
dplyr::summarise(totalfullfare_ym = sum(fare_swipe))
df %>% filter(To.Date > '2010-06-10') %>%
filter(fare_type == 'Full.Fare') %>%
group_by(Station) %>%
dplyr::summarise(totalfullfare_ym = sum(fare_swipe))
df %>% filter(To.Date > '2010-06-10') %>%
filter(fare_type == 'Full.Fare') %>%
group_by(To.Date, Station) %>%
dplyr::summarise(totalfullfare_ym = sum(fare_swipe))
runApp('~/GitHub/MTA')
runApp('~/GitHub/MTA')
setwd("~/GitHub/MTA")
runApp()
runApp()
df %>% filter(To.Date > '2010-06-10') %>%
filter(fare_type == 'Full.Fare') %>%
group_by(To.Date) %>%
dplyr::summarise(totalfullfare_ym = sum(fare_swipe))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
